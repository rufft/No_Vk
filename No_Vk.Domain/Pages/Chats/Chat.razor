@page "/chat/{ChatId}"

@using Microsoft.Extensions.Logging
@using No_Vk.Domain.Models.SignalRHubs
@using No_Vk.Domain.Services
@using UserData = No_Vk.Domain.Models
@using Microsoft.AspNetCore.SignalR.Client;

@inject IUserRepository _userRepository 
@inject IChatHandlerService _chatHandler 
@inject ILoggedInUserSessionService _loggedInUserSession 
@inject NavigationManager _navigationManager
@inject ILogger<Chat> _logger


<div class="info">
    <h3>Chat @ChatId</h3>
    <h3>@_chat.Name</h3>
    <h3>@_chat.Users.Count() человека</h3>
</div>

<div class="messages">
    @foreach (var message in _chatMessages)
    {
        <div class="message">
            (@message.MessageCreationTime.Date) (@message.MessageCreationTime.TimeOfDay)
            @message.FromUser.UserName :
            @message.MessageText
        </div>
    }
</div>
<input type="text" @bind="_messageText"/>
<button @onclick="() => SendAsync(GetMessageFromString())">Отправить</button>
<style>
    .info {
        border: solid 2px black;
        margin: 5px;
        padding: 5px
    }
    .messages {
        border: solid 2px black;
        margin: 5px;
        padding: 5px
    }
    .message {
        border: solid 2px black;
        margin: 5px;
        padding: 5px
    }
</style>

@code {
    [Parameter]
    public string ChatId { get; set; }

    private UserData.Chat _chat;

    private List<Message> _chatMessages;

    private User _me;

    private string _messageText;

    private string _hubUrl;
    private HubConnection _hubConnection;

    private async Task GetChatHubAsync()
    {
        var baseUrl = _navigationManager.BaseUri;

        _hubUrl = baseUrl.TrimEnd('/') + ChatHub.Url;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On("Broadcast", BroadcastMessage);

        await _hubConnection.StartAsync();

    }

    private async Task BroadcastMessage()
    {
        _chat = await _userRepository.GetChatAsync(ChatId);
        _chatMessages = _chat?.Messages?.OrderBy(m => m.MessageCreationTime).ToList();

        StateHasChanged();
    }

    private async Task SendAsync(Message message)
    {
        await _chatHandler.AddMessageToDatabaseAsync(_chat, message);
        await _hubConnection.SendAsync("Broadcast");
    }

    private Message GetMessageFromString() => new(_me, _chat, _messageText);

    protected override async void OnInitialized()
    {
        _chat = await _userRepository.GetChatAsync(ChatId);
        _chatMessages = _chat?.Messages?.OrderByDescending(m => m.MessageCreationTime).ToList();
        await GetChatHubAsync();
        _me = _loggedInUserSession.Me;
    }

}